package io.github.gwkit.coverjet.gradle.task

import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider
import javax.inject.Inject

internal fun Project.generateTestKitProperties(
    testTaskName: String,
    javaAgentPropertyProvider: TaskProvider<CovJvmParameter>,
): TaskProvider<GenTestKitProperties> = tasks.register(
    "${testTaskName}TestKitProperties",
    GenTestKitProperties::class.java,
) { task ->
    task.taskName.set(testTaskName)
    task.javaAgentParametersFile.set(
        javaAgentPropertyProvider.flatMap { it.javaAgentParameters }
    )
}

internal abstract class GenTestKitProperties @Inject constructor(
    objects: ObjectFactory,
) : DefaultTask() {

    init {
        group = "verification"
        description = "Generates gradle.properties with Intellij Coverage java agent jmv args"
    }

    @Input
    val taskName: Property<String> = objects.property(String::class.java)

    @InputFile
    val javaAgentParametersFile: RegularFileProperty = objects.fileProperty()

    @OutputFile
    val propertiesFile: RegularFileProperty = objects.fileProperty().convention {
        temporaryDir.resolve("testkit-gradle.properties")
    }

    @TaskAction
    fun generateProperties() {
        val parameters: List<String> = javaAgentParametersFile.readJavaAgentParameter().get()
        val propsContent: String = parameters.joinToString(prefix = "org.gradle.jvmargs=", separator = " ")
        propertiesFile.get().asFile.writeText(
            """
            # Generated by CoverJet Plugin
            # This file contains JVM arguments for Gradle TestKit tests
            $propsContent
        """.trimIndent()
        )
    }
}
